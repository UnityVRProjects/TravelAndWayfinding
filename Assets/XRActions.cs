//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/XRActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRActions"",
    ""maps"": [
        {
            ""name"": ""XRMotion"",
            ""id"": ""7ab2060d-0712-40ea-bd18-6941109f531a"",
            ""actions"": [
                {
                    ""name"": ""FlyTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""c8baf73f-1d53-48b4-bc76-c49b1922fbfc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c6cc7c35-5943-4729-ad5b-78e8ea66c93f"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlyTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XRMotion
        m_XRMotion = asset.FindActionMap("XRMotion", throwIfNotFound: true);
        m_XRMotion_FlyTrigger = m_XRMotion.FindAction("FlyTrigger", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRMotion
    private readonly InputActionMap m_XRMotion;
    private List<IXRMotionActions> m_XRMotionActionsCallbackInterfaces = new List<IXRMotionActions>();
    private readonly InputAction m_XRMotion_FlyTrigger;
    public struct XRMotionActions
    {
        private @XRActions m_Wrapper;
        public XRMotionActions(@XRActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FlyTrigger => m_Wrapper.m_XRMotion_FlyTrigger;
        public InputActionMap Get() { return m_Wrapper.m_XRMotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRMotionActions set) { return set.Get(); }
        public void AddCallbacks(IXRMotionActions instance)
        {
            if (instance == null || m_Wrapper.m_XRMotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRMotionActionsCallbackInterfaces.Add(instance);
            @FlyTrigger.started += instance.OnFlyTrigger;
            @FlyTrigger.performed += instance.OnFlyTrigger;
            @FlyTrigger.canceled += instance.OnFlyTrigger;
        }

        private void UnregisterCallbacks(IXRMotionActions instance)
        {
            @FlyTrigger.started -= instance.OnFlyTrigger;
            @FlyTrigger.performed -= instance.OnFlyTrigger;
            @FlyTrigger.canceled -= instance.OnFlyTrigger;
        }

        public void RemoveCallbacks(IXRMotionActions instance)
        {
            if (m_Wrapper.m_XRMotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRMotionActions instance)
        {
            foreach (var item in m_Wrapper.m_XRMotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRMotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRMotionActions @XRMotion => new XRMotionActions(this);
    public interface IXRMotionActions
    {
        void OnFlyTrigger(InputAction.CallbackContext context);
    }
}
